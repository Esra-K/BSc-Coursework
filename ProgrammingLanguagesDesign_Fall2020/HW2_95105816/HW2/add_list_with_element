#lang scheme
(define (add lst n)
   (map (lambda (x) (+ x n)) lst))

;; (add '(1 2 30 -4 5) 8)

(define (add-all lst)
  (cond
    [(null? lst) 0]
    [(null? (cdr lst)) (car lst)]
    [else (+ (car lst) (add-all (cdr lst)))]
    )
  )

;; (add-all '(5 -5 4 -10 7 1 0.5))

(define (main lst n)
  (cond
    [#t (display "'") (display (add lst n)) (display " ") (display (add-all (add lst n)))]
    ))

;; (define name (read-line))

(main '(5 10 -1.5 20) 25)

  