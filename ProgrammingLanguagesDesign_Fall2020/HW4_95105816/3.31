#lang eopl

(define-datatype environment environment?
  [empty-env]
  [extend-env [bvar symbol?]
              [bval expval?]
              [saved-env environment?]]
  ; HERE //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  [extend-env-rec [ids (list-of symbol?)]
                  [bvars (list-of (list-of symbol?))]
                  [bodies (list-of expression?)]
                  [saved-env environment?]])


(define apply-env
  (lambda (env search-sym)
    (cases environment env
      [empty-env () (eopl:error 'apply-env "No binding for ~s" search-sym)]
      [extend-env (var val saved-env) (if (eqv? search-sym var)
                                          val
                                          (apply-env saved-env search-sym))]
      ; HERE ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      [extend-env-rec (p-names b-vars p-bodies saved-env) (let loop ([p-names p-names]
                                                                     [b-vars b-vars]
                                                                     [p-bodies p-bodies])
                                                            (if (null? p-names)
                                                                (apply-env saved-env search-sym)
                                                                (if (eqv? search-sym (car p-names))
                                                                    (proc-val (procedure (car b-vars)
                                                                                         (car p-bodies)
                                                                                         env))
                                                                    (loop (cdr p-names)
                                                                          (cdr b-vars)
                                                                          (cdr p-bodies)))))])))




(define value-of
  (lambda (exp env)
    (cases expression exp
      [const-exp (num) (num-val num)]
      [var-exp (var) (apply-env env var)]
      [diff-exp (exp1 exp2) (let ([val1 (value-of exp1 env)]
                                  [val2 (value-of exp2 env)])
                              (let ([num1 (expval->num val1)]
                                    [num2 (expval->num val2)])
                                (num-val (- num1 num2))))]
      [zero?-exp (exp1) (let ([val1 (value-of exp1 env)])
                          (let ([num1 (expval->num val1)])
                            (if (zero? num1)
                                (bool-val #t)
                                (bool-val #f))))]
      [if-exp (exp1 exp2 exp3) (let ([val1 (value-of exp1 env)])
                                 (if (expval->bool val1)
                                     (value-of exp2 env)
                                     (value-of exp3 env)))]
      [let-exp (vars exps body) (let loop ([env env]
                                           [vars vars]
                                           [exps exps])
                                  (if (null? vars)
                                      (value-of body env)
                                      (loop (extend-env (car vars) (value-of (car exps) env) env)
                                            (cdr vars)
                                            (cdr exps))))]
      [proc-exp (vars body) (proc-val (procedure vars body env))]
      [call-exp (rator rands) (let ([proc (expval->proc (value-of rator env))]
                                    [args (map (lambda (rand)
                                                 (value-of rand env))
                                               rands)])
                                (apply-procedure proc args))]

     ; HERE ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      [letrec-exp (p-names b-vars p-bodies letrec-body) (value-of letrec-body
                                                                  (extend-env-rec p-names b-vars p-bodies env))])))


